#!/bin/bash

# $1 is params.in.(fn_eval_num) is a file of [variable name = variable value]
#                               pairs suggested by the optimizer from Dakota, where
#                               this file naming convention is given by the user in the
#                               file dakota.in.template
# $2 is results.out.(fn_eval_num) returned to Dakota by the user in this driver
#                                 file with the value of the objective function, where
#                                 this file naming convention is given by the user in the
#                                 file dakota.in.template

# env | grep CM_DK # Uncommenting this line reports all environment 
                   # variables Concentration.exe has exported

# Record function evaluation number and echo it
num=`echo $1 | cut -c 11-`
# The value after '-c' should be equal to 2 plus the length of the parameters_file name in dakota.in, e.g., 11 for 'design.in'.
echo "design_driver:num=$num"
# Make and go to directory for doing simulations associated to this objective 
#   function evaluation
done=0
counter=0
while [ $done -lt 1 ]
do
  if [ -d workdir.$num.$counter ]
  then
      echo "Directory exists"
      ((counter++))
  else
      done=1
  fi
done
mkdir workdir.$num.$counter
cd workdir.$num.$counter
# Record all variable values suggested by optimizer for this objective function
#   evaluation to the specified metadata file which was stored as an environment 
#   variable when the concentration executable was invoked.

# -------------------------------------------
# PRE-PROCESSING / ANALYSIS / POST-PROCESSING
# -------------------------------------------
# Put variables associated to F(X) simulation from $1, replace tags in 
#   simulation.template with values into simulation.in, then do F(X) analysis
../dprepro ../$1 ../simulation.template simulation.in
../../../bin/Simulation.exe simulation.in simulation.out

# Print the subdiameter value to $2 and send it back to the dakota working
#   directory where when it is found to exist, dakota uses to advance the 
#   optimization

mv simulation.out $2

if [ -e "$2" ]; then
  cp $2 ../
else
  echo "Cannot cp $2 to ../ (driver error)"
fi

# --------
# Clean up
# --------
cd ..
# Optionally clean up this working directory.  I tend not to clean these up 
#  as a sort of debugging tool in case things go wrong or I want to visualize
#  one of a particular objective function's simulations.
rm -rf workdir.$num.$counter
